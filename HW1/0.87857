{"nbformat":4,"nbformat_minor":0,"metadata":{"accelerator":"GPU","colab":{"name":"0.87857","provenance":[],"collapsed_sections":["Jx3x1nDkG-Uy","wS_4-77xHk44","BtE3b6JEH7rw","6j1eOV3TOH-j","aQikz3IPiyPf"],"toc_visible":true},"kernelspec":{"display_name":"Python 3","name":"python3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"mz0_QVkxCrX3"},"source":["# **Homework 1: COVID-19 Cases Prediction (Regression)**"]},{"cell_type":"markdown","metadata":{"id":"ZeZnPAiwDRWG"},"source":["Author: Heng-Jui Chang\n","\n","Slides: https://github.com/ga642381/ML2021-Spring/blob/main/HW01/HW01.pdf  \n","Video: TBA\n","\n","Objectives:\n","* Solve a regression problem with deep neural networks (DNN).\n","* Understand basic DNN training tips.\n","* Get familiar with PyTorch.\n","\n","If any questions, please contact the TAs via TA hours, NTU COOL, or email.\n"]},{"cell_type":"markdown","metadata":{"id":"Jx3x1nDkG-Uy"},"source":["# **Download Data**\n","\n","\n","If the Google drive links are dead, you can download data from [kaggle](https://www.kaggle.com/c/ml2021spring-hw1/data), and upload data manually to the workspace."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tMj55YDKG6ch","executionInfo":{"status":"ok","timestamp":1616290617231,"user_tz":-480,"elapsed":3608,"user":{"displayName":"YDBX","photoUrl":"https://lh5.googleusercontent.com/-UMSb4ZzIN6M/AAAAAAAAAAI/AAAAAAAAHkc/DgzvjcH-KTA/s64/photo.jpg","userId":"15751498837825255117"}},"outputId":"b2fc349c-4dbb-42df-a70d-476648c58a60"},"source":["tr_path = 'covid.train.csv'  # path to training data\n","tt_path = 'covid.test.csv'   # path to testing data\n","\n","!gdown --id '19CCyCgJrUxtvgZF53vnctJiOJ23T5mqF' --output covid.train.csv\n","!gdown --id '1CE240jLm2npU-tdz81-oVKEF3T2yfT1O' --output covid.test.csv"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Downloading...\n","From: https://drive.google.com/uc?id=19CCyCgJrUxtvgZF53vnctJiOJ23T5mqF\n","To: /content/covid.train.csv\n","100% 2.00M/2.00M [00:00<00:00, 63.4MB/s]\n","Downloading...\n","From: https://drive.google.com/uc?id=1CE240jLm2npU-tdz81-oVKEF3T2yfT1O\n","To: /content/covid.test.csv\n","100% 651k/651k [00:00<00:00, 10.2MB/s]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"wS_4-77xHk44"},"source":["# **Import Some Packages**"]},{"cell_type":"code","metadata":{"id":"k-onQd4JNA5H","executionInfo":{"status":"ok","timestamp":1616290620913,"user_tz":-480,"elapsed":7278,"user":{"displayName":"YDBX","photoUrl":"https://lh5.googleusercontent.com/-UMSb4ZzIN6M/AAAAAAAAAAI/AAAAAAAAHkc/DgzvjcH-KTA/s64/photo.jpg","userId":"15751498837825255117"}}},"source":["# PyTorch\n","import torch\n","import torch.nn as nn\n","from torch.utils.data import Dataset, DataLoader\n","\n","# For data preprocess\n","import numpy as np\n","import csv\n","import os\n","import math\n","\n","# For plotting\n","import matplotlib.pyplot as plt\n","from matplotlib.pyplot import figure\n","\n","myseed = 42069  # set a random seed for reproducibility\n","torch.backends.cudnn.deterministic = True\n","torch.backends.cudnn.benchmark = False\n","np.random.seed(myseed)\n","torch.manual_seed(myseed)\n","if torch.cuda.is_available():\n","    torch.cuda.manual_seed_all(myseed)"],"execution_count":2,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"BtE3b6JEH7rw"},"source":["# **Some Utilities**\n","\n","You do not need to modify this part."]},{"cell_type":"code","metadata":{"id":"FWMT3uf1NGQp","executionInfo":{"status":"ok","timestamp":1616290620916,"user_tz":-480,"elapsed":7271,"user":{"displayName":"YDBX","photoUrl":"https://lh5.googleusercontent.com/-UMSb4ZzIN6M/AAAAAAAAAAI/AAAAAAAAHkc/DgzvjcH-KTA/s64/photo.jpg","userId":"15751498837825255117"}}},"source":["def get_device():\n","    ''' Get device (if GPU is available, use GPU) '''\n","    return 'cuda' if torch.cuda.is_available() else 'cpu'\n","\n","def plot_learning_curve(loss_record, title=''):\n","    ''' Plot learning curve of your DNN (train & dev loss) '''\n","    total_steps = len(loss_record['train'])\n","    x_1 = range(total_steps)\n","    x_2 = x_1[::len(loss_record['train']) // len(loss_record['dev'])]\n","    figure(figsize=(6, 4))\n","    plt.plot(x_1, loss_record['train'], c='tab:red', label='train')\n","    plt.plot(x_2, loss_record['dev'], c='tab:cyan', label='dev')\n","    plt.ylim(0.0, 5.)\n","    plt.xlabel('Training steps')\n","    plt.ylabel('MSE loss')\n","    plt.title('Learning curve of {}'.format(title))\n","    plt.legend()\n","    plt.show()\n","\n","\n","def plot_pred(dv_set, model, device, lim=35., preds=None, targets=None):\n","    ''' Plot prediction of your DNN '''\n","    if preds is None or targets is None:\n","        model.eval()\n","        preds, targets = [], []\n","        for x, y in dv_set:\n","            x, y = x.to(device), y.to(device)\n","            with torch.no_grad():\n","                pred = model(x)\n","                preds.append(pred.detach().cpu())\n","                targets.append(y.detach().cpu())\n","        preds = torch.cat(preds, dim=0).numpy()\n","        targets = torch.cat(targets, dim=0).numpy()\n","\n","    figure(figsize=(5, 5))\n","    plt.scatter(targets, preds, c='r', alpha=0.5)\n","    plt.plot([-0.2, lim], [-0.2, lim], c='b')\n","    plt.xlim(-0.2, lim)\n","    plt.ylim(-0.2, lim)\n","    plt.xlabel('ground truth value')\n","    plt.ylabel('predicted value')\n","    plt.title('Ground Truth v.s. Prediction')\n","    plt.show()"],"execution_count":3,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"39U_XFX6KOoj"},"source":["# **Preprocess**\n","\n","We have three kinds of datasets:\n","* `train`: for training\n","* `dev`: for validation\n","* `test`: for testing (w/o target value)"]},{"cell_type":"markdown","metadata":{"id":"TQ-MdwpLL7Dt"},"source":["## **Dataset**\n","\n","The `COVID19Dataset` below does:\n","* read `.csv` files\n","* extract features\n","* split `covid.train.csv` into train/dev sets\n","* normalize features\n","\n","Finishing `TODO` below might make you pass medium baseline."]},{"cell_type":"code","metadata":{"id":"0zlpIp9ANJRU","executionInfo":{"status":"ok","timestamp":1616290620918,"user_tz":-480,"elapsed":7268,"user":{"displayName":"YDBX","photoUrl":"https://lh5.googleusercontent.com/-UMSb4ZzIN6M/AAAAAAAAAAI/AAAAAAAAHkc/DgzvjcH-KTA/s64/photo.jpg","userId":"15751498837825255117"}}},"source":["class COVID19Dataset(Dataset):\n","    ''' Dataset for loading and preprocessing the COVID19 dataset '''\n","    def __init__(self,\n","                 path,\n","                 mode='train',\n","                 target_only=False):\n","        self.mode = mode\n","\n","        # Read data into numpy arrays\n","        with open(path, 'r') as fp:\n","            data = list(csv.reader(fp))\n","            data = np.array(data[1:])[:, 1:].astype(float)\n","        \n","        if not target_only:\n","            feats = list(range(93))\n","        else:\n","            # TODO: Using 40 states & 2 tested_positive features (indices = 57 & 75)\n","            feats = list(range(41)) + [41, 42, 43, 57, 58, 59, 60, 61, 75, 76, 77, 78, 79]\n","            pass\n","\n","        if mode == 'test':\n","            # Testing data\n","            # data: 893 x 93 (40 states + day 1 (18) + day 2 (18) + day 3 (17))\n","            data = data[:, feats]\n","            self.data = torch.FloatTensor(data)\n","        else:\n","            # Training data (train/dev sets)\n","            # data: 2700 x 94 (40 states + day 1 (18) + day 2 (18) + day 3 (18))\n","            target = data[:, -1]\n","            data = data[:, feats]\n","            \n","            # Splitting training data into train & dev sets\n","            if mode == 'train':\n","                indices = [i for i in range(len(data)) if i % 10 != 0]\n","            elif mode == 'dev':\n","                indices = [i for i in range(len(data)) if i % 10 == 0]\n","            \n","            # Convert data into PyTorch tensors\n","            self.data = torch.FloatTensor(data[indices])\n","            self.target = torch.FloatTensor(target[indices])\n","\n","        # Normalize features (you may remove this part to see what will happen)\n","        # self.data[:, 40:] = \\\n","        #     (self.data[:, 40:] - self.data[:, 40:].mean(dim=0, keepdim=True)) \\\n","        #ã€€    / self.data[:, 40:].std(dim=0, keepdim=True)\n","\n","        self.dim = self.data.shape[1]\n","\n","        print('Finished reading the {} set of COVID19 Dataset ({} samples found, each dim = {})'\n","              .format(mode, len(self.data), self.dim))\n","\n","    def __getitem__(self, index):\n","        # Returns one sample at a time\n","        if self.mode in ['train', 'dev']:\n","            # For training\n","            return self.data[index], self.target[index]\n","        else:\n","            # For testing (no target)\n","            return self.data[index]\n","\n","    def __len__(self):\n","        # Returns the size of the dataset\n","        return len(self.data)"],"execution_count":4,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"AlhTlkE7MDo3"},"source":["## **DataLoader**\n","\n","A `DataLoader` loads data from a given `Dataset` into batches.\n"]},{"cell_type":"code","metadata":{"id":"hlhLk5t6MBX3","executionInfo":{"status":"ok","timestamp":1616290620920,"user_tz":-480,"elapsed":7266,"user":{"displayName":"YDBX","photoUrl":"https://lh5.googleusercontent.com/-UMSb4ZzIN6M/AAAAAAAAAAI/AAAAAAAAHkc/DgzvjcH-KTA/s64/photo.jpg","userId":"15751498837825255117"}}},"source":["def prep_dataloader(path, mode, batch_size, n_jobs=0, target_only=False):\n","    ''' Generates a dataset, then is put into a dataloader. '''\n","    dataset = COVID19Dataset(path, mode=mode, target_only=target_only)  # Construct dataset\n","    dataloader = DataLoader(\n","        dataset, batch_size,\n","        shuffle=(mode == 'train'), drop_last=False,\n","        num_workers=n_jobs, pin_memory=True)                            # Construct dataloader\n","    return dataloader"],"execution_count":5,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"SGuycwR0MeQB"},"source":["# **Deep Neural Network**\n","\n","`NeuralNet` is an `nn.Module` designed for regression.\n","The DNN consists of 2 fully-connected layers with ReLU activation.\n","This module also included a function `cal_loss` for calculating loss.\n"]},{"cell_type":"code","metadata":{"id":"49-uXYovOAI0","executionInfo":{"status":"ok","timestamp":1616294877030,"user_tz":-480,"elapsed":706,"user":{"displayName":"YDBX","photoUrl":"https://lh5.googleusercontent.com/-UMSb4ZzIN6M/AAAAAAAAAAI/AAAAAAAAHkc/DgzvjcH-KTA/s64/photo.jpg","userId":"15751498837825255117"}}},"source":["class NeuralNet(nn.Module):\n","    ''' A simple fully-connected deep neural network '''\n","    def __init__(self, input_dim):\n","        super(NeuralNet, self).__init__()\n","\n","        # Define your neural network here\n","        # TODO: How to modify this model to achieve better performance?\n","        self.net = nn.Sequential(\n","            nn.Linear(input_dim, 64),\n","            nn.ReLU(),\n","            nn.Linear(64, 32),\n","            nn.ReLU(),\n","            nn.Linear(32, 16),\n","            nn.ReLU(),\n","            nn.Linear(16, 8),\n","            nn.ReLU(),\n","            nn.Linear(8, 1)\n","        )\n","\n","        # Mean squared error loss\n","        self.criterion = nn.MSELoss(reduction='mean')\n","\n","    def forward(self, x):\n","        ''' Given input of size (batch_size x input_dim), compute output of the network '''\n","        return self.net(x).squeeze(1)\n","\n","    def cal_loss(self, pred, target):\n","        ''' Calculate loss '''\n","        # TODO: you may implement L2 regularization here\n","        return self.criterion(pred, target)"],"execution_count":99,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"DvFWVjZ5Nvga"},"source":["# **Train/Dev/Test**"]},{"cell_type":"markdown","metadata":{"id":"MAM8QecJOyqn"},"source":["## **Training**"]},{"cell_type":"code","metadata":{"id":"lOqcmYzMO7jB","executionInfo":{"status":"ok","timestamp":1616294877333,"user_tz":-480,"elapsed":991,"user":{"displayName":"YDBX","photoUrl":"https://lh5.googleusercontent.com/-UMSb4ZzIN6M/AAAAAAAAAAI/AAAAAAAAHkc/DgzvjcH-KTA/s64/photo.jpg","userId":"15751498837825255117"}}},"source":["def train(tr_set, dv_set, model, config, device):\n","    ''' DNN training '''\n","\n","    n_epochs = config['n_epochs']  # Maximum number of epochs\n","\n","    # Setup optimizer\n","    optimizer = getattr(torch.optim, config['optimizer'])(\n","        model.parameters(), **config['optim_hparas'])\n","\n","    min_mse = 1000.\n","    loss_record = {'train': [], 'dev': []}      # for recording training loss\n","    early_stop_cnt = 0\n","    epoch = 0\n","    while epoch < n_epochs:\n","        model.train()                           # set model to training mode\n","        for x, y in tr_set:                     # iterate through the dataloader\n","            optimizer.zero_grad()               # set gradient to zero\n","            x, y = x.to(device), y.to(device)   # move data to device (cpu/cuda)\n","            pred = model(x)                     # forward pass (compute output)\n","            mse_loss = model.cal_loss(pred, y)  # compute loss\n","            mse_loss.backward()                 # compute gradient (backpropagation)\n","            optimizer.step()                    # update model with optimizer\n","            loss_record['train'].append(mse_loss.detach().cpu().item())\n","\n","        # After each epoch, test your model on the validation (development) set.\n","        dev_mse = dev(dv_set, model, device)\n","        if dev_mse < min_mse:\n","            # Save model if your model improved\n","            min_mse = dev_mse\n","            print('Saving model (epoch = {:4d}, loss = {:.4f})'\n","                .format(epoch + 1, min_mse))\n","            torch.save(model.state_dict(), config['save_path'])  # Save model to specified path\n","            early_stop_cnt = 0\n","        else:\n","            early_stop_cnt += 1\n","\n","        epoch += 1\n","        loss_record['dev'].append(dev_mse)\n","        if early_stop_cnt > config['early_stop']:\n","            # Stop training if your model stops improving for \"config['early_stop']\" epochs.\n","            break\n","\n","    print('Finished training after {} epochs'.format(epoch))\n","    return min_mse, loss_record"],"execution_count":100,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"0hSd4Bn3O2PL"},"source":["## **Validation**"]},{"cell_type":"code","metadata":{"id":"yrxrD3YsN3U2","executionInfo":{"status":"ok","timestamp":1616294877336,"user_tz":-480,"elapsed":978,"user":{"displayName":"YDBX","photoUrl":"https://lh5.googleusercontent.com/-UMSb4ZzIN6M/AAAAAAAAAAI/AAAAAAAAHkc/DgzvjcH-KTA/s64/photo.jpg","userId":"15751498837825255117"}}},"source":["def dev(dv_set, model, device):\n","    model.eval()                                # set model to evalutation mode\n","    total_loss = 0\n","    for x, y in dv_set:                         # iterate through the dataloader\n","        x, y = x.to(device), y.to(device)       # move data to device (cpu/cuda)\n","        with torch.no_grad():                   # disable gradient calculation\n","            pred = model(x)                     # forward pass (compute output)\n","            mse_loss = model.cal_loss(pred, y)  # compute loss\n","        total_loss += mse_loss.detach().cpu().item() * len(x)  # accumulate loss\n","    total_loss = total_loss / len(dv_set.dataset)              # compute averaged loss\n","\n","    return total_loss"],"execution_count":101,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"g0pdrhQAO41L"},"source":["## **Testing**"]},{"cell_type":"code","metadata":{"id":"aSBMRFlYN5tB","executionInfo":{"status":"ok","timestamp":1616294877338,"user_tz":-480,"elapsed":967,"user":{"displayName":"YDBX","photoUrl":"https://lh5.googleusercontent.com/-UMSb4ZzIN6M/AAAAAAAAAAI/AAAAAAAAHkc/DgzvjcH-KTA/s64/photo.jpg","userId":"15751498837825255117"}}},"source":["def test(tt_set, model, device):\n","    model.eval()                                # set model to evalutation mode\n","    preds = []\n","    for x in tt_set:                            # iterate through the dataloader\n","        x = x.to(device)                        # move data to device (cpu/cuda)\n","        with torch.no_grad():                   # disable gradient calculation\n","            pred = model(x)                     # forward pass (compute output)\n","            preds.append(pred.detach().cpu())   # collect prediction\n","    preds = torch.cat(preds, dim=0).numpy()     # concatenate all predictions and convert to a numpy array\n","    return preds"],"execution_count":102,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"SvckkF5dvf0j"},"source":["# **Setup Hyper-parameters**\n","\n","`config` contains hyper-parameters for training and the path to save your model."]},{"cell_type":"code","metadata":{"id":"NPXpdumwPjE7","executionInfo":{"status":"ok","timestamp":1616294877342,"user_tz":-480,"elapsed":954,"user":{"displayName":"YDBX","photoUrl":"https://lh5.googleusercontent.com/-UMSb4ZzIN6M/AAAAAAAAAAI/AAAAAAAAHkc/DgzvjcH-KTA/s64/photo.jpg","userId":"15751498837825255117"}}},"source":["device = get_device()                 # get the current available device ('cpu' or 'cuda')\n","os.makedirs('models', exist_ok=True)  # The trained model will be saved to ./models/\n","target_only = True                   # TODO: Using 40 states & 2 tested_positive features\n","\n","# TODO: How to tune these hyper-parameters to improve your model's performance?\n","config = {\n","    'n_epochs': 3000,                # maximum number of epochs\n","    'batch_size': 10,               # mini-batch size for dataloader\n","    'optimizer': 'Adam',              # optimization algorithm (optimizer in torch.optim)\n","    'optim_hparas': {                # hyper-parameters for the optimizer (depends on which optimizer you are using)\n","        'lr': 0.0005,                 # learning rate of Adam\n","        'weight_decay': 0.001           # weight_decay for Adam (L2 penalty)\n","    },\n","    'early_stop': 200,               # early stopping epochs (the number epochs since your model's last improvement)\n","    'save_path': 'models/model.pth'  # your model will be saved here\n","}"],"execution_count":103,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"6j1eOV3TOH-j"},"source":["# **Load data and model**"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eNrYBMmePLKm","executionInfo":{"status":"ok","timestamp":1616294877707,"user_tz":-480,"elapsed":1306,"user":{"displayName":"YDBX","photoUrl":"https://lh5.googleusercontent.com/-UMSb4ZzIN6M/AAAAAAAAAAI/AAAAAAAAHkc/DgzvjcH-KTA/s64/photo.jpg","userId":"15751498837825255117"}},"outputId":"03a22335-1796-4675-e4eb-12603af53110"},"source":["tr_set = prep_dataloader(tr_path, 'train', config['batch_size'], target_only=target_only)\n","dv_set = prep_dataloader(tr_path, 'dev', config['batch_size'], target_only=target_only)\n","tt_set = prep_dataloader(tt_path, 'test', config['batch_size'], target_only=target_only)"],"execution_count":104,"outputs":[{"output_type":"stream","text":["Finished reading the train set of COVID19 Dataset (2430 samples found, each dim = 54)\n","Finished reading the dev set of COVID19 Dataset (270 samples found, each dim = 54)\n","Finished reading the test set of COVID19 Dataset (893 samples found, each dim = 54)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"FHylSirLP9oh","executionInfo":{"status":"ok","timestamp":1616294877709,"user_tz":-480,"elapsed":1293,"user":{"displayName":"YDBX","photoUrl":"https://lh5.googleusercontent.com/-UMSb4ZzIN6M/AAAAAAAAAAI/AAAAAAAAHkc/DgzvjcH-KTA/s64/photo.jpg","userId":"15751498837825255117"}}},"source":["model = NeuralNet(tr_set.dataset.dim).to(device)  # Construct model and move to device"],"execution_count":105,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"sX2B_zgSOPTJ"},"source":["# **Start Training!**"]},{"cell_type":"code","metadata":{"id":"GrEbUxazQAAZ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616295227855,"user_tz":-480,"elapsed":351427,"user":{"displayName":"YDBX","photoUrl":"https://lh5.googleusercontent.com/-UMSb4ZzIN6M/AAAAAAAAAAI/AAAAAAAAHkc/DgzvjcH-KTA/s64/photo.jpg","userId":"15751498837825255117"}},"outputId":"40c0e632-0969-4fbb-eb81-896872c6eb40"},"source":["model_loss, model_loss_record = train(tr_set, dv_set, model, config, device)\n","print(model_loss)"],"execution_count":106,"outputs":[{"output_type":"stream","text":["Saving model (epoch =    1, loss = 9.8771)\n","Saving model (epoch =    2, loss = 1.9258)\n","Saving model (epoch =    3, loss = 1.3508)\n","Saving model (epoch =    4, loss = 1.2049)\n","Saving model (epoch =    5, loss = 1.1730)\n","Saving model (epoch =    7, loss = 1.1319)\n","Saving model (epoch =   11, loss = 1.0685)\n","Saving model (epoch =   14, loss = 1.0488)\n","Saving model (epoch =   15, loss = 1.0288)\n","Saving model (epoch =   17, loss = 1.0162)\n","Saving model (epoch =   18, loss = 1.0142)\n","Saving model (epoch =   22, loss = 0.9783)\n","Saving model (epoch =   23, loss = 0.9722)\n","Saving model (epoch =   26, loss = 0.9597)\n","Saving model (epoch =   29, loss = 0.9262)\n","Saving model (epoch =   32, loss = 0.9064)\n","Saving model (epoch =   33, loss = 0.9038)\n","Saving model (epoch =   37, loss = 0.8825)\n","Saving model (epoch =   41, loss = 0.8702)\n","Saving model (epoch =   42, loss = 0.8673)\n","Saving model (epoch =   45, loss = 0.8605)\n","Saving model (epoch =   48, loss = 0.8577)\n","Saving model (epoch =   49, loss = 0.8561)\n","Saving model (epoch =   54, loss = 0.8519)\n","Saving model (epoch =   61, loss = 0.8387)\n","Saving model (epoch =   64, loss = 0.8385)\n","Saving model (epoch =   66, loss = 0.8381)\n","Saving model (epoch =   74, loss = 0.8369)\n","Saving model (epoch =   78, loss = 0.8262)\n","Saving model (epoch =   96, loss = 0.8246)\n","Saving model (epoch =  101, loss = 0.8246)\n","Saving model (epoch =  125, loss = 0.8190)\n","Saving model (epoch =  130, loss = 0.8190)\n","Saving model (epoch =  148, loss = 0.8185)\n","Saving model (epoch =  187, loss = 0.8138)\n","Saving model (epoch =  232, loss = 0.8093)\n","Saving model (epoch =  404, loss = 0.8078)\n","Saving model (epoch =  420, loss = 0.8062)\n","Finished training after 621 epochs\n","0.8061926679478751\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"hsNO9nnXQBvP","colab":{"base_uri":"https://localhost:8080/","height":295},"executionInfo":{"status":"ok","timestamp":1616295228335,"user_tz":-480,"elapsed":351889,"user":{"displayName":"YDBX","photoUrl":"https://lh5.googleusercontent.com/-UMSb4ZzIN6M/AAAAAAAAAAI/AAAAAAAAHkc/DgzvjcH-KTA/s64/photo.jpg","userId":"15751498837825255117"}},"outputId":"81f745cf-bfcb-4a8e-8eff-50ca69087e94"},"source":["plot_learning_curve(model_loss_record, title='deep model')"],"execution_count":107,"outputs":[{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAXgAAAEWCAYAAABsY4yMAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAgAElEQVR4nOydd3gUVdfAfzfJppBO7x0pFlBAbNgVrK8iqGADVKyIBRs2bCh2eS2Ir71g97OigAVUFKUo0ntJIBASSC9b7vfHzm5mazbJbspyfs+TJzszt5y5M3Pm3HPPvaO01giCIAjRR0xDCyAIgiBEBlHwgiAIUYooeEEQhChFFLwgCEKUIgpeEAQhShEFLwiCEKWIghfCglJqqFJqXUPL0VhQSh2rlNqglCpWSp0XQvo3lVKP1Ids9YVS6mel1FUhptVKqZ6RlulAQxR8FKCU2qqUOrUhZdBa/6K17t2QMjQyHgJe0FqnaK3/r6GFEQ5MRMELIaGUim1oGepKPZ9DF2BVPdYnCD6Igo9ilFIxSqm7lFKblFJ5SqmPlFLNTcc/VkrlKKUKlFILlVIHm469qZR6WSn1rVKqBDjJ6ClMVkqtMPJ8qJRKNNKfqJTKMuUPmNY4fodSapdSaqdS6qpgXXSlVHOl1BtG2n1Kqf8z9o9VSv3qldZdjp9zmGycb6wp/flKqRWhtJcfua5WSm1USuUrpb5USrU39m8CugNfGS6aBD95D1dKLVNKFSmlPgQSvY6frZT6Wym1Xym1SCl1mOlYe6XUp0qpXKXUFqXUTaZjU5VSnxjtXWTU0T/IOWil1PWGO6lIKfWwUqqHUWeh0Qbx1Z2zcew0pdRa43q/ACivusYrpdYY1/B7pVSXQHIJYUJrLX9N/A/YCpzqZ/8k4A+gI5AAvALMNh0fD6Qax54D/jYdexMoAI7FaQgkGvX8CbQHmgNrgGuN9CcCWV4yBUo7HMgBDgaaAe8CGugZ4Py+AT4EMgELcIKxfyzwq1dadzkBzmETcJop/cfAXaG0l1c9JwN7gSOMtP8FFlZ3TYxj8cA24BbjfEYCVuAR4/jhwB5gCBALXGGUl2Ccx1LgfqOc7sBmYJiRd6pR1kij7MnAFsASQBYNfAGkGdejAvjBKDcdWA1cUd05Ay2BIlO9twA24Crj+H+AjUBfIA64F1jk77rJXxh1Q0MLIH9huIiBFfwa4BTTdjvj4Y/zkzbDeMjSje03gbf91HOpafsJYKbx+0R8FXygtK8Dj5mO9Qz0gBsyO4BMP8fGUr2C9z6HR4DXjd+pQAnQpRbt9RrwhGk7xUjbNdg1MY4dD+wElGnfIqoU/MvAw1551gEn4FT6272O3Q28YfyeCvxhOhYD7AKGBpBFA8eatpcCd5q2nwaeq+6cgcu96lVAFlUKfg5wpZdcpaa2FwUfgT9x0UQ3XYDPjW7+fpwKzA60UUrFKqUeN9wRhTgVEjgtMRc7/JSZY/pdivMhD0SgtO29yvZXj4tOQL7Wel+QNMHwLvt9YIThNhkBLNNabzOOBWwvP+W2x2mFA6C1LgbygA4hyNQeyNaGZjPYZvrdBbjNJYchSycjXxegvdexKV4yus9Za+3AqWjbE5jdpt9lfrbN1y3QOXtcU+PczG3fBXjeJHM+zpdAKO0l1JK4hhZAiCg7gPFa69+8DyilLsPZbT4Vp3JPB/bh6TeN1FKju3C6QVx0CpJ2B9BcKZWhtd7vdawEp4sHAKVUWz/5Pc5Ba71aKbUNOAMYg1Phm+vy215+2IlTabnqTgZaANkh5N0FdFBKKZOS74zTfeSS41Gt9aPeGZVSRwNbtNa9gpTfyZQ+Bmdb7wxBruoIds67vOpVeF5X1zm9FwY5hBARCz56sCilEk1/ccBM4FHXYJZSqpVS6j9G+lSc/tY8nEpyWj3K+hEwTinVVynVDLgvUEKt9S6c3fuXlFKZSimLUup44/A/wMFKqQHGAO7UEOt/H6e//XicPngXwdrLm9nGOQwwegPTgMVa660h1P87Tv/0Tcb5jACONB1/FbhWKTVEOUlWSp2llErFOa5RpJS6UymVZPTEDlFKDTblH6iUGmHcAzfjvM5/hCBXdQQ7529wXgtXvTcB5hfuTOBuZQzkK6XSlVKjwiCTEARR8NHDtzi7066/qcDzwJfAXKVUEc6HfIiR/m2c3e1snANp4VAAIaG1ngPMAH7COfDmqrsiQJbLcPp61+IcfLzZKGc9znjz+cAG4NcA+b2ZjdOf/aPWeq9pf7D28j6H+ThfTJ/itF57ABeHUrnWuhKne2gsTlfFRcBnpuNLgKuBF3D2qjYaadFa24GzgQE4B0/3Av/D2QNz8YVR5j6cbTdCa20NRbZq5A54zkY7jgIex2k09AJ+M+X9HJgOfGC4BFfi7EUJEUR5ugEFof5RSvXF+cAnaK1tDS1PU0YpNRXnYOWlDS2L0PCIBS80CMoZf56glMrEadl9JcpdEMJLRBW8ck52+deYsLEkknUJTY5rcLpbNuGMVLmuYcURhOgjoi4apdRWYJCXn1MQBEGoB8RFIwiCEKVE2oLfgnMkXwOvaK1n+UkzAZgAkJycPLBPnz41rmdzTi4V8fF025lFXNs22HJ2V58pQqjEBHS5n2AQpcCrrWNSU3AUFVdtp6TgKK7aTjzkYLwpX7nKo7z4Lp2p3LbdI487TRASDuqFttmo3LyFmORmxHfr5s7nLVegcmPS04jv5BvCbk4X174dtp27AIht0Rx7Xj4qIR5dUYlqlkRC9+4e6V3n7Nrnrw0AbLt3Y8t1dgwT+vZBxcaGlM9cV2zzTCztPef/VGzciC6vIKFnD1RiYsC8/sqvWLcObbWR0Ls3yuI7xcQsm33fPqzZO4nNzCA2NZXK7Tt8yvV3LpVbt+IoLvHY79oX37ULMSn+5515XLvYWLDbiWvTmrhWrbDl5mLbvYe4Vi2Ja+NvTleQsoCE3gehLBYAtNVKxbr1KIuFhN4HBSzDlpeHbVeOx75A18ybyh07cBQUYunUkdj09Ooz4NmW1p07sec75835u4drcg/FNEsivnt393bFhg3oikoSevVEJVQtQVS5ZQuOklLiu3cjplkzn7JCPXd/LF26dK/WupW/Y5FW8B201tlKqdbAPGCi1nphoPSDBg3SS5bU3FU/+smX2NixC28/OJnWt9/OniefrIPUdSOhTx8q1q712a8sFrTVM1It5cQTKf75Z/d28nHHUfJrVaRf37VrfMpZ06evR3mdXpnJjmuu9cjjShOMHvPnYdu1i22XXU7SoIF0ffddd77kE46nZIHnZfJXbkK/vnR85hniu3b1KyNAm3vvZfcjzmXOM8eMZt/7s4nv0oXKbdtI6t+frh9+4JHedc6uff7aAGDPc8+RN/MVAHr9voi4zMyQ8pnryhwzmrb33+9xfPM551KxYQPdvviCRC8F5U9OMxuGHo8tN5eeCxZgadM6YN19165h30cfkXP/A2SMGkny8ceTPfEmn3L9ncv28eMpWfS7x37Xvk6v/Y+UY4+t9rxdtLrlFlpeM4G9L79M7vMzaHHtNbS++Wa/+YOV1fPnn7C0dYa8W7Oz2XjKqcS1b0evH38MWEb+2++we5rn1ItA18ybrJtvoei77+jw7DOknRFapKW5LXfd/wD7P/oIgNThw+n43LMB0wYrCyBpwAC6fjDbvb1x2DCs27bT47s5Hs/F1jGXULZsGV3ee5dmAweGXFcoKKWWaq0H+TsWUReN1jrb+L8H+BzPyRzhRanq0wi1xp8hULF6DZuGN/1Q5sqsbDafcy62vY1zqChr4kS0w9HQYghNkIgpeGP2XarrN3A6zljn8NcVpaH8hd99h6OkJGiayqysoMdrg7f1DlD2999hr6exsO+dt6nYsIGCr79uaFH8UjRvPo7S0oYWQ2iCRNKCbwP8qpT6B+f06m+01t9FsL5GgT/3TG3JvvkWdj34YNA0ux+un6+86bKykNJF4oXTGCj8LupvXSEKidhiY1rrzUDADw2EvT6avovG7H934T0Q1dix5+c3tAgRIfvmWxpaBCEAVquVrKwsysvLA6d58QUA1qxZg/2M4ThOcC5ntC8xkaI1awKmDVYWgM1iqUqnNdY77gBgY1ERypTfdt216MpKtsTFEWPaX11dZhITE+nYsSMWY0A7FKJkNckqH03h9983oBxCQ1C5aRMbLr2MTq++WqN8+z7+hIyRI8MvkHZQ9MMPpJx8MiqCY0O2/Hw2nT7sgB9/ysrKIjU1la5duwZs7zK7HYCkvn2pzM7Gvs8ZRROblk58504B0wYrCyAmqRkJPZxRNNac3diMsZKEXr2IMUXRVGzejKO0lPhu3YhNTg65Lhdaa/Ly8sjKyqJbt25B05qJujj48hUrGloEoZ4pXboMgKK5c2uW0Wply4gLwi7Pvg8/JOuGGyn47PPQMtQykq3k999xFBfjKCqqVf5ooby8nBYtWoT0MtU2G/b93qtO1wEF2m7Hlp+Po6S4+vS1rUYpWrRoEbSX4o8oseBBH9hGjBAArXVErWh/uOZh2HL31Gu9DUYjWLAw1GtcmZUVdnmtu3aF96URgNrcx1FhwatGcIM1RRrDSqL24shZPUXz57O2bz8qNm2qPnE4aQTtGipaa8pCmBjXKKlNO1vrvGqyrxi2xrtGXlQoeIiOQdaGQoXQdpF4GVRs3Mj6QYOrT1hLiubNA6Ds339rkbsW59sEfeH7P/qY4h9+aGgxakYja+b9hYW88sEHNc535plnsr+wMAISVREVCr6pxsFXbt9efaIowvWScE3aqS7Gv76w7y+o2mjkStr8og1H+1Vs3FjnMqIZrXW1Fvr+wkJe/fBDn/22avJ9++23ZKSl1Um+6ogaH3xTpHLz5gasvZ4UmcPus8u6I9g3tmtBHXsXBV98ESZBDCLiovG9Xjn3PxDmKsJ/T+y4/gYq1q6l549NrJdgYMvNxbZnDwm9exMTIDzxvunT2bxjB0NGjsQSF0diQgIZaWlsyM5m/fr1nHfeeWzfuJHy8nJumjSJaydOBKBr16788s47lJSWcv6oURx33HEsWrSIDh068MUXX5CUlFRn+aNHwTd2yysCvr+mQfiuS+my5WwbM4aeP/8UoKq61VU8/we0EbZmy92LvW3bkBezCkf9dcbhoHDuXFJPO63OA8u2vDz2PPkUbac+QIzXomuByP3vC+x98UWPfcVB1qOJBDnTplGxxneyod3o7aiYGI9lH1RcnEc4ozltbHIyjvIyLJ070/7hhyGAgn/oxhtZtXYtiz/5hIV//cWIG25gyWef0Xf4cABef/11kvfvpyQ/n+Mvv5xRY8bQokULjzI2bNjA7NmzefXVV7nwwgv59NNPufTSun+UKzpcNLXxlzYVAj2o4VAm9dJs4atkn7GoU+nixWEr00zpkiVUGgOyO666ivXHHheResyEc2wj/403yb5pEoXfflvnsvY8+RQF//d/FH47J+Q8ZuWuUBR8+WWd5XBR/Otv5Eyrz+/Ch4a/JSQGHXIIXTt2dG/PmDGDwWedxYmXXMKO7Gw2bNjgk6dbt24MGDAAgIEDB7J169awyBc9Fny0UsNFpio2b6l5HWF4WThKStxLxtY/EXpTVeNDtebk4CguJqFnz6Dp/C4UZm7zMIlvzXHOerbn1W42cfH8H2g9aVJ4hAH2vvRy2MracdVVALSdMsW9z1HmGxNuPm6mbKVzGayYhAQcFVXLefud6GSkTTrkECo2bcIR4jIdLpqZXCs///wz8+fPZ8Enn5CoNcOvu85vLHuCqRcRGxtLWQ3rDERUWPAQvXHwpTVcPnnzmWeGlC7c3oR1Awexdcwl4S20kbPxxJPYfPY51aZbN3CQc8ZpI6fCj2XpQlutgUNawzzmYC8qwrq7+m867LrnnrDWW1tSkpMpCjDgXVBQQGZmJs2Skli3eTOL//qrXmWLDgu+CcUdN1aqXUM+hCYuXxl8sVBdWVkDiaIAV9RQWRnWOi7C1tDu/awbJ1K8YEHI65Zbd+70+U5AqGwafgb2vLw6rZFen7TIyODoAQMYdP75JCYk0Nrwr9vy8xk+fDgzZ86k/+mn06tzZ4YMjlxYsD+iQ8EfANiLS8ib5fNBrLpRgxejq4tcFwo+/azWefPffoeKtev8H2xsL/g6amN7UREqrnE9msULFtRbXfa8PI/tSE/Eqty2DUdpKYnVrAcTjDefeMJnn3XXLpIOPpg5c+b4XYtm69atlK1cScvMTFaajKPJkyfXWg5vGtddVAeifaLT3v/OIP+tt8Na5vaxY50/wmkeRkjZen/9p3LLVt9EDW3muqimDXbeeReJBwf+RNv6wUcS19r3i1AHKlu9FoQL99IT9iheyycqFHwjeawjinlgqDHjG1UQ/qtT+vffFJlWDW0MSy4AIb9gCr74ggrTHIjyf30XyLPtOUDWsWlEWHNyiGvZsqHFCCtRoeABdGOx3g5wto8bX6f8JX/8QfJRRwVNY90WYAZwPd4C4frCUuniP0Ob+CX3t5vyQK66OmLbuxdt852Y15SJiigaWWysYSn+5ZcgR2t2bbaPHcee5593b9ckMmf/B77TxetKoBA5W25uWMq3ZmeHpRwgLC+BjcOGsf64oWEQJjKUr1sX2RngUaZLokLBCw3LjqsnhLW8kkWL3L/Lli2rc3m77rqbNX36Ur56dY3zbr/q6jrXH1YirH+s27Zjb6QfHwew5TTMF87sEV4ULFKIgj9Qacpdfm/Z/Vhd/vzy+2sRxVO2dGm1aXzrCr8WLltRmxUxhXBha8QvvWBEhYIXF82Bzd7/vlB9ogiS//rrzh9+Xpq5L70Uljq2jx1L6bLljTOioJE/f3bTJKT6kvSRl17iuTfeqKfaAhMVCv6AwNG4H6JwUv5P4/rsYnUTtPY8+ZT/fFqzd8Z/wyaHbU/1sztrRKQVc4DyK7dupXxV/X1kJOyrlzYhokbBR3MUTd4bb2LN8rpJo/h8GxvWnTtrmCOEa3MAX79Nw88I/xLNjYDps2Zx2Nlnc8rll7PBWCxs06ZNDB8+nKPPPZdTr7iCtevWUVBQQJcuXXAYaxSVlJbSqVMnrBFYcTZqwiSjmT3Tp5N8zNGRq+AAVja1Zcv5I8JTUIStaHtBAfs//rjG+er9M4dh4r4NWaws9ox8cpRWVLWzcoA2LRdcVIC2mxaV25+Hy5ETs3wDuqycvjEO7k+JDVrvslWr+GTOHP74+GNsdjvHXHghh/frx4QJE5g5cyad7HYWL1vGjbfcwk8LFjBgwAAWLFjAUa1aMWfhQoYNG4YlAov1iYIXIqvgG7l/trYEj4MP4Zzr6Z2a89DDFH7zTY3zlZs+c2hep8he7LuoVn1e4ppMatNWay3WP6rdySxatoxzTjnFvZLkWSeeSHlFBYsWLWLUqFE4jBUkrYb8F110ER9++CFH3XgjH8+Zw8S77qpVvdURNQo+2pcqKPmrZqtKCuFjV4hfTrLt2hVhSWqGc1XG8IYV6grfpW5tuXuI79ghrPUEFiC4An64V9U67GUrV0IzTxWnEhLQXssF2wsL8EdCz07GJw2DW++BcDgcZGRksHzZMneIbnzXbgCce+65TJkyhfsuu4zlq1dz8skn16qO6ogKH/wBEUUTZv/czjsjYzE0amp5n5T++We1acrXNL6VD9cPPpKyJdWHedaVbZcE+PKQqWdYmZWNtYktv1CT79UeO3AgX//4I2Xl5RSVlPDtggU0S0qiW7duvP/ss4Cz9/GP0TNKSUlh8ODB3P7445xxwgnExtbuJVId0WPBR7cB74Ou49o0pfW8LnW0U1OfvGokPc5ga8ADobnvQvgozaZTTwWg25ehD646KipwNJGFwA7v148Lhg9nyMiRtGrenIHGYnLvvvsu11x+OdNnzcJqs3HR6NEccbRzKY6LLrqIUaNG8b0rzDYCRIWCj+pP9jVx9jz7XAPW3jiUqF8aycB26R9/1Gt9W879T8hpd1x7LaW/B5evcM4c7F7fN40Utvx8YjMyAh6/c8IE7pzgOas7sVs3vpw5073tctEAjBw5ktJ/IzuBLSpcNELjRfv5PFmdaSTKMSzUwG2UffMtERSk8VGdcgfIvuVWt5XvqKykbOXKGn9iL1SsO3diC+FLU8GpX2M0ehR8ND30ggfFCxc2tAiNhybUWa0M04ejQ8Wl6O379oWcJ9AAayB0Nd/pbWxEhYJXTeimF2rOjgnXeGyX/PprA0lSQ4JY59Zwz0o1Ubl1C5XbAyypXFca2pDy16QOR+P5JkAEqc05RoWCFwQf/DwM+95/vwEE8Y9tZ+1CKkPxme97f3aT+Mh3uFA7dpCXlxeSAqxrcEJDobUmLy+PxMTEGuWLikFWiP44+IgSpU1nrbO/tHbUxZq01cC9cCCSdf31PvtiZ75C0UknsXvvXuyFhcQUFRFbUBCR668KC9E18PFbYmI85Ii12YhJSHBvu45ZQgiTTExMpGPHjtWmMxMdCv4A6J4JNUOXl9d7hIg3Ia1yqZTH/VuXgdSmap3WFVVYSLdu3cj/bRG7H3mEzDFjaHv/fawJ13ISJtLOPpvCr78OOX2flf+ydsQF7u3Ob75B8oAB7m2XjH3XRmYehbhoBBx+pp83ddYdMbChRagVdfnCkzUrK4ySBKChffBCjYi4gldKxSqlliulQn/t1YIDbaJTOCmPcCyuEIQo6X3ai4vDUk7JH4vDUo7gpD4s+ElAROdxy0QnoTFR8utvDS1CSOQ+F75JaFtHjgpLOYXfhMMO1Gy96OIwlBN+sibdzPpjjq23+iKq4JVSHYGzgP9Fsh6QQVah8WDPz29oEeqd+o55D4a22ij755+GFsMvjoIC7Pn55L7wIuXr1kW8vkhb8M8BdwABF6tQSk1QSi1RSi3JreWX6iUOXhDqh523TY5Y2VprSpcvr30Bho1Xm/XvQ6aGLrW9L8/0v/+FF9h64UXhkCgoEVPwSqmzgT1a66DL2WmtZ2mtB2mtB7Vq1SpS4ghC06CR++RLFi2KWNn7P/mEyo1N80Mjgdj74osBj9XHrNhIWvDHAucqpbYCHwAnK6XejVhtMrovRAF1iaKJBPlvvllvdVVu3lLrvLb8fEoW/R5GaaKDiMXBa63vBu4GUEqdCEzWWgdYOLpuyCCrIESGinrwE4eDDfU4cNmUkDh4QRCEKKVeZrJqrX8Gfo5oHeKhEQShKWG3R7yK6LDgxUMjCILgQ3QoeCQOXhCaOo1tgNkfhd9809Ai1IioUPAyyCoITZ+iuXMbWoSoIyoUvCAIguBL1Ch4LXHwgiAIHkSFgleNfPafIAhCQxAVCl4QBEHwRRS8IAhClBIVCl5WkxQEQfAlKhS8IAiC4EvUKHiJohEEQfAkShS8+GgEQRC8iRIFL4uNCYIgeBMVCl7i4AVBEHyJCgUvCIIg+BI1Cl5WkxQEQfAkKhS8qHZBEARfokLBC4IgCL5Ej4KXOHhBEAQPokLBSxSNIAiCL1Gh4AVBEARfokbBiw0vCILgSXQoeHHRCIIg+BAdCh5ZbEwQBMGbqFDwotoFQRB8iQoFLwiCIPgSNQpelioQBEHwJCoUvMTBC4Ig+BIVCl4QBEHwJXoUvHhoBEFoopQuXx6RcqNCwSuZ5iQIQhMm66abIlJuVCh4QRAEwZeoUfAy0UkQBMGT6FDw4qERBEHwIWIKXimVqJT6Uyn1j1JqlVLqwUjVBRIHLwiC4E1cBMuuAE7WWhcrpSzAr0qpOVrrP8JdkcTBC4Ig+BIxBa+11kCxsWkx/kQTC4IgeGHP3RuRciPqg1dKxSql/gb2APO01ov9pJmglFqilFqSm5tb67q0eGgEQRA8iKiC11rbtdYDgI7AkUqpQ/ykmaW1HqS1HtSqVata1SNx8IIgCL7USMErpWKUUmk1rURrvR/4CRhe07yCIAhC7ahWwSul3ldKpSmlkoGVwGql1O0h5GullMowficBpwFr6ypwkBojV7QgCEITJBQLvp/WuhA4D5gDdAMuCyFfO+AnpdQK4C+cPvivay1pEJR4aARBEHwIJYrGYoQ5nge8oLW2KlW9StVarwAOr6uAgiAIQu0IxYJ/BdgKJAMLlVJdgMJIClUbZKkCQRAET6q14LXWM4AZpl3blFInRU6k2iA+GkEQBG9CGWSdZAyyKqXUa0qpZcDJ9SBbjZA4eEEQBE9CcdGMNwZZTwcycQ6wPh5RqWqILFUgCILgSygK3mUbnwm8o7VehcQkCoIgNHpCUfBLlVJzcSr475VSqYAjsmLVHFlNUhAEwZNQwiSvBAYAm7XWpUqpFsC4yIpVM0S1C4Ig+BJKFI1DKdURGKOcoYgLtNZfRVwyQRAEoU6EEkXzODAJWG383aSUmhZpwWqMxMELgiB4EIqL5kxggNbaAaCUegtYDkyJpGA1QaJoBEEQfAl1NckM0+/0SAhSV0TFC4IgeBKKBf8YsFwp9RPO8czjgbsiKpUgCIJQZ0IZZJ2tlPoZGGzsulNrnRNRqQRBEIQ6E1DBK6WO8NqVZfxvr5Rqr7VeFjmxao6OiejHqQRBEJocwSz4p4Mc0zSi9WhkkFUQBMGXgApea93IVowUBEEQaoL4NQRBEKKUqFDwMsVJEATBl6hQ8IIgCIIvARW8UupS0+9jvY7dGEmhakpMehogk50EQRDMBLPgbzX9/q/XsfERkKXWWNIzqk8kCIJwgBFMwasAv/1tNwrkw9uCIAhVBFPwOsBvf9uCIAhCIyPYRKc+SqkVOK31HsZvjO3uEZdMEARBqBPBFHzfepMiTEi3QhAEoYpgM1m3mbeNT/UdD2zXWi+NtGA1QYlqFwRB8CFYmOTXSqlDjN/tgJU4o2feUUrdXE/yCYIgCLUk2CBrN631SuP3OGCe1vocYAiNLEzSjUTRCIIguAmm4K2m36cA3wJorYsARySFqimi1gVBEHwJNsi6Qyk1Eec68EcA3wEopZIASz3IJgiCINSBYBb8lcDBwFjgIq31fmP/UcAbEZarVmix5QVBENwEi6LZA1zrZ/9PwE+RFKqmKAmiEQRB8CHYJ/u+DJZRa31u+MWpG1oMeEEQBDfBfPBHAzuA2cBiGvFYZqMVTBAEoQEJpuDbAqcBo4ExwDfAbK31qvoQTBAEQagbAQdZtd7rKpMAACAASURBVNZ2rfV3WusrcA6sbgR+DnUteKVUJ6XUT0qp1UqpVUqpSWGSOSCymqQgCEIVwSx4lFIJwFk4rfiuwAzg8xDLtgG3aa2XKaVSgaVKqXla69V1kDcAMsoqCILgTbBB1reBQ3BOcHrQNKs1JLTWu4Bdxu8ipdQaoAMQAQUvCIIgeBMsDv5SoBcwCViklCo0/oqUUoU1qUQp1RU4HOdgrfexCUqpJUqpJbm5uTUp1l9NdcwvCIIQPQSLgw/LB7mVUinAp8DNWmufF4PWehYwC2DQoEG18rVIHLwgCIIvYVHigVBKWXAq9/e01p9Fsi5BEATBk4gpeKWUAl4D1mitn4lUPQAxxiCrPSai7ytBEIQmRSQ14rHAZcDJSqm/jb8zI1FRnMO5uKU9NjYSxQuCIDRJgoZJ1gWt9a/U06hnUvt2ANhEwQuCILiJCp9GQkYGALbYiL2vBEEQmhxRoeBdal0seEEQhCqiRMEbg6yi4AVBENxEhYJ3fV7KFhuLBv537oVsadexIUUSBEFocKJCwbsseFtsHDktWvHeGefzyPiJDSyVIAhCwxIlCt6JLTaW3c1bApBUUeaRpqhZMhc/MoN1nbvVs3SCIAgNQ3QoeF3lg9/VsjUArffleaT5u1dfdrdoxXvDz6t3+QRBEBqCqFDwZh98TotWADQvLPBI4zBmuSotC9cIgnBgEBUK3uyDL49PAHxXiHd9DEQUvCAIBwpRouCd2GJiscY5t2xxnpOeXBZ8jHbUp2iCIAgNRpQo+CofvCsW3uo1q9UhFrwgCAcYUaHgLYbOtsXGumezelvwWhkWvEMUvCAIBwZRoeDNPnjXejSBLHhx0QiCcKAQJQreSXAL3lDwDlHw4WJDx67kGPMOBEFofETF8otmH3xgC14GWcPNhHseA+Cn60Y3sCSCIPgjKix4i4eLJoAFH2MMsooPXhCEA4SoUPBxpkFWVxSN99LB9hjndoxE0QiCcIAQHQrebcFXuWi8P/5RaVj0EiYpCMKBQpQoeCf22Fi3793q5aJxuWzEBy8IwoFCVCh4sw++ykXjpeBjxYIXoo/VXXtw0suz2Zue2dCiCI2QqFDw/sIkrXGePniruGiEKOSzk4YDsLz3wQ0sidAYiQoFHwsoh8MIk/QfReOy4F1r0ghCY6A4MalO3yhQYq8IQYgabZdUUU5pYpJbsXvHwbsseFc0TU25+JEZfHTKmXUTUhC8uPe6yVx79zTsdTQ8RM8L/ogaBZ9WUkxhckq1Frw9tnanvLtFK14eeVndhIwiXEs/1JbVXXvw22EDwyRN02V1t14AVFjia5VfiWoXghA1Cj69uIiClNSAM1ldPvnaWPD2OiqzcLG098F8edwp9VpncWKS3/2umcG15YY7H+He6ybXqYxoINZhB6AivnYK3oVuJPdopFjbpTsvjrxMXmc1JCoUfFxmJuklRRQmp7ijaCqMD3+4cCn+tV17sPygfjUq37s3EGkcSnH/hJt95Jx88708e8lV9SbH2i7dOefZ1/ml/yCfY7XtCQmeuNZGqq0FzwESNHDj7Q/yySln1r6dDlCi4imNzcgwWfBVLpp9qWluV0Klxflhv23tOnLrLffVqHxrnKX6RGGkLCGRXw4fwj0NbOGu7dIDgKV9D/U55h2GKtSOWEPBl3sZJDUl2i14u3G/1bWnc6ARFQqe2FjSSoopSE7FGhuHMh6aEU+8wrvGR7bLExJrXXxlPSt470la3tS3PP6oblBQA9OuuI6/e/WtH4FqQG56JlOumxzQ/VSfhMtFc6DQlNspN6M53w8ZWq91RoWCTzjoIFruz6c0qRklzZJJKyl2H/tp0NEAlAZR8Plp6Tx45U2UBHjgq1O44aa6bmhRs+Sw1vfG2SM59YV3WNm9l3vfO2ecz/OjxwfMY48NPpZRabEw76jjuf2mKQAs7XNI0GtQn7x91gh+P2wgPw4+tqFFIdZuuGhqqbii2273pSm7aG6bNIXHx15PWR17azUhKhS8Uopj/1ni3k6srHD/tthsAJQGsdbeOvMCfh50NHMDvF3D7aKxK8XGjl0CHnc97DrA4xtuBf/2WRdgj41j4u0Pufe9fu6F7t/+JodVN1jtGuTWCvamZzJ50j1MG3s9xYlJDT5Q5v4+r9HTy2neksIwt2mouC34Oiquug56NxW8x9aaErmZLYD6HdOLmrui054cTlqyCHCGNLqw2KwAlCV6Wo9mJeN6yAJZpVZLeC/Ie8PP4+p7Hmd9p65+j1fnggm3gjfjL/zR5d/9fshQfhx4FFC9i6bSpLAqjPGPPw/uzznPvs5Hp54VLnFrhUsZKmNdotGP/peRj7/UILJUuWhqp7hcL9/6DgRoKMqbsIvGdd/Vp0cgahQ8wKQP3gCgy84s9744m/MBKvNyD5gtpji7oeADKC3vkMu6srlDZwCyWrf1e7yympu4OEwKXgMvj7jEY18wN8rjY6/n4asmAb7LMXvjuok1yv09XKvR5guOGOJOZ1eKv3v15c9+/Wssf21xWfCxpq97WS3xdY7trw0uF01dFVd11yPcbG7fiZ0tW9drndC0LXht3F71OYYWVQo+vaSY1x+6nbvfqrLGXBNBvBWX+UaJNRT8X/36s6FjV59yQ3XRrOrWi59NyisQSRXlgO9Lxy1bgO56fGUlUHMFv+DwIzn5xfd8fH8FKal8dNrZHvuKklN88vt10VSr4J1tppUK2gOyx8Zxy633c+fEu4KWF05cPRLv88pp0Yrvjjo+qPss3NTVReO24Os5qumau6dxycPP14s/2XyVgkUbvXnWBdxz7W21quP2iXcz78jjapU3dDwj+uqDqFLwAN12ZdG8YL97u9Tw+Xor07IEk4I3HrKlfQ91f4bOjLlL5XJRbGnf0e16cHHjHQ/x4NU3U5aQwPMXjaUgOdV9rCA5lRkXXkGFxVKl4AOMCwR62OPszvGEmlp7b5wzCh0TQ07LVh77/fVMCv0oePCd7FWdD951E+uYGB+LxaxYq+uuZrdszbSx12MN8kIpi09gT2bzgMfz09I9tl09NW+rNy8tg+lXXMfEyVODyhRO3HHwdVSU9W3Bu1xCge6XUKmwWPjolDODuvzMz26wwei3zh7JIj9zNqpDA0v6Hca0cTfUOG+oWGNjsRrPRFRY8Eqp15VSe5RSKyNVRyDSS4rcvzd07saPg45Be91AZktAVzNAZb4gD181iX2paYy/70mmX36t3/QzLhzL/504jK+PO9m978WRl/L5ScN58tIJxBvjAvtTnC+AnOYtPXoY3jfx+k5dmTf42FrHTLsUqvdAnD+lUtQsxf1xFDOFKake29X54M29nmA3dHWW59OXXM28IUNZESTc8p7rb+eiaS/6PbapQ2cumD6Tb4450b3P1Q6VFouHW+bvMK3IuKTPoSFPpnNd0/Wdu3nIWFPqU8GbX/aBeqGh8t7w83h55GVBred9phd0uaX6e7+mCrQ+LOpnR19Zr/W5iKQF/yYwPILlByTeZmP+9WO46v8+AOCRKyf6pPn05OF8fsJpFCSnVmsRW70uyO7mLQH4x0vpWKxOxf2d8aCmF1e9aLa16wjAD0cex6JDjwDg35590DgH+Sbd9oA7rXuA0niOrpnyGNPG3+geK6hpTH+M8R1a141vj4mhIDnFrzVUmJxMSVIzj31Kw77UqoesMs7i4aLxt5SD+SXh/XIwE+qAU6CIIqhaKrfcT89nb4ZznfSvh1Yt8aDdk9/iPZSBK3Kofe4eU72+LzMNzD79HOYNPtbvy/D2SVNCnkznsuC/P/oEnrrsmhpHGLnOpSaDrNvatmfhgMFB01TGxfHRKWdh89NTMxsG5Ql163m4egBlQcrJT8sw1V29cszNyGR/Sio333JfSOMEdX1JhcIi07pL9TlxMmIKXmu9EMiPVPnVEas15y2YS8fdu/we/3roqcy4eDznPTXL70xNM95KyKXgXQNkLpLLSz22XS+OsoQE1nfp7t5fkJIGwIpefclu5Rxo3WiKqAn0hncpGu8X0pb2HTnp5dlsb9PeJ88Fj7/E5o7OQd2yxET+7NefOybexXlPver3oSpISaMk0VPBO2IU+1LT3NtFzZI9FbyX9aiBm25/0L0dbM2ZQJbn0j6HsK5zVZvpEMY/95tkdOFS4NvadnDvcw2yVlri/b7k4m2V7t8zR1zCqS++h0Mpslu1wRoby9b2HZl1/himjb/RPZGupvxx8ADG3zvdp35rnIWc5i35t0fvkMqxBfgGcTDGPvA0D1xza9A0H516Fi+PvJTLHnzGxz1mVuou5fj5Cafz3VHHhyyDC9eLO9iyx2YXWyiurNzMFiw+eAD/HNSPV84fU236us4iLktI8GtcmDHPNK60WFjS51CevTjwPJNw0eA+eKXUBKXUEqXUktzc3LCWnVxexjtTb+Wp5x9l+ozH6LFjq990LuvazPY27dwuFG+f+C7DKnD57l14K3yXj31Fzz6e+00PSHbrNj51B/LBuwZXvW9IV/fWNanLhQbyTV/6KWqWzJ0T72JZH+cL7bGxvj7HfWnpFDfzVPC2mFiPgd3C5BQPH7y3P74mD4z55fnRKWe5lcnkSfdw7d2PugfJQxlELPDTU3D1RsoSk9htxCG7lH6FxeK3O18ZV9X+rkHol0dcwqUPPcfzF43zyON6WfsjmBvr+YvHsaVDZ3a0buexvywhkSvvnc5NIY4D+Ftc795rbg24KF22yaL1Z5272G/02HJatuaLE073lNFswccnYI2NZcbF45h+xXUePZpPTj6DycZEt7pgVvCue2ve4GPJT00nLy2DjUZUmou9GZnEG73phUcM4a9qDDjvEOqaUBafwJnPvcl9195KbkZzt85YdOgRAQfrrXEWbp80hS9POC3ikVsNruC11rO01oO01oNatWpVfYZaMHDtSo5cs4LDNq4NKf3qrj24YuozTLrV6TZ5fOz1Hsd3tHE+lN4K3nvpVtfMWPNgK1SFCwI+DziYFLx2Tqt34bI8A1kx3grFu/vsktvFzla+L5f8tAwfF01ZYiJvnj3SvV3cLNmjLrMFr6l+4M380RWza+HlkZfyf17KxGXZuV6Kv/QfxA6v8FKL1WlxeytbDR6T1y6e9gJQ1S6Vlni/IaklSVWD367IpU+M2P0l/Q7zaJ+UspJAp0l+WgZ2pVhjrOljJrXUOdva4WUdlyUkUGqUX51VCFVt71qrRQO/DRjssSidQynOe+IVPj75DC59+Hn3fu8XuRlzj2BbW8+eodmlUZaY6BF5Ze5Frenak6V9D/Xo/fngpd9ymrf0eV5yM1sQZ7ORWFFOSWIS+anpTBt/Ixc8MZOR01/m6nunA1Uu0v0paR7X6I4gL5nKuLgauWh+PWwgn59wmnvb1dNa0q8/Fz72Iuc/OQtwjgtdfc/j/us09dCDTcAMBw2u4OuTiR+9xRsPTub6j9+m5b68gOluuPMRALa368ATl07wOf7tsc7BU2+L3dvydlkGRcmBwxqzvZTV1rYdKEh13uDliYlc6GcCTllCAr8dNtDdJXb5x3MzPCNJzH5zgG1tfXsq3uSlZ1DspeB/HHwsW9t3cm/7uGhMluDbZ13gVqSBMC8JYbaWXWWbcQ0QlyUkooH7r72Nyx981iONy1rb3byFxyv2n159Wd7nEI+0+1NS3Q/Vt8ec6HdNevNDZ54V7ZLHfDynRWtuvfleslr5zmnIzWzO/514Otff9QhLveRIK/H/YjBbk3szAkcGufB20Xgrq9XderKzZRsKUtN4adTlHseCTZgzW/euGZguvF00ZoVs9pe7yl/VrWoJDG+0V+jg6Ef/y2UPPlNVXmo6s4f9hzb5uaSWlFDcLNmvUtRUTWosSE0L+vJyUZyYxLD/vsNLF1R952HukceRbzw3//Tsw3vD/uOR577rJjPD5FopTPE1ZqpbXtzsg89u1ZbZp53DJq9eSLg4MKa/GSiga042XXOy6b5zB5Mn3VNtnjnHnhTw2PZ2HVg4YDDJ5WW8N/w8nxhylyJzKdo73p7JE16RN+bJTvaYGMY98FS1Mq3o1de9jsrwPxa6XUbb2nXwSOftk97SvnoFn5/mq+C9KUxOoXlhgXvbbO19fPIZ1daxw+QPN1vLAGu79mTY82+Z9lQpeLNimXHhWIqaJfNXv8OIt9koAZ655Gq0iuHcX+YD/q2jtV16uKMySpol+/2IS4kRWquAeGulx7EYrd1Wm8Vq5cfBxwBw73W3ccfbM+llcgPmp6aT3crZa1rS51AGrq0KKEvwenG4MCvovRmZZBQXUh6fQMuCfX7SJrjP8avjT+WmD9/0uOZ2pbjhjof91gO+Cn76Zdewu0UrnnnuEY8XuHe68vgqGeceOdRjnMt1r+9PSeXvg5xBCKu79+K4FUv9yuAaWzG79czP0XOjxwFQmpBERnEhJUnN/L6Yfus/yN3z2Z+SGtJgtesZWtXjIPe+x8bdQI8dW/nftLu52Qh8GD33S2K85kxonH71L48/DW8KgvVY8OxJX3v3owAkl5VydqAMdSCSYZKzgd+B3kqpLKXUldXlqU8Grl3JW1Nv46h/l9WpnAeuuZXJk+7x+9HjssQk/u3Rm/fOOB+A4b8v8DhusVaSZXLRmAfWAg0Og6dlp3FO0AFY062Xh0XqbcFvCrA0gpldLVv7nexkxttF8+i4G6p8rzX0KXov8PbXwf39uk3KExLZb3LBfH7SMOYPOY6C1DSPMLpnx1zJ5VOfJrtlax9XE8Ce5i39ugwOMbnvHLGxnPLie1TGWTxmu4Kzl+Dyy7fNq4q22dauIzfc+YhHhNO+tHT3uMBKkxIBzzkQaaZoK7OCz81ozrj7nmBUgGUULn/gaY/w0T8P7u9hTV9316N+87kobuZ5nb875kSW9z6YXS1auSPBwDm24VCKrcaL2fyiXXFQX1409Qz2NHda+xPufsztilzV7SDy0jI45YV3GXv/k/xjjEnlpme6I8bKExL8RiQVGTK23pdHSlkpxQEU/H2mCU5fDz3V/cy5cKnnGReO5XPDDbizlf8Im02dunrIEmhsZ+6QofzrNb4GkJeW6bFtjY31eF7eOXOET55W+yMTjxIxC15rPTpSZYeLzrt3MvXV58hu1ZbNHTrx6HjfcEoXTz/3CLfdfC8ArfLzyG3eImBaF3syW3gMlplV31tTb+P2m+4mxzTodcut97t/d8jNwWKzsqWartv5T7xCQWoaB29ax6oevbn3uskcvm4VKaUlbOxU8xmZRckpPuGfZpTDQVbrtrTJqxoQX97nEFb26M0R61bVuL4PTwtutywxljBY26U7g9asCJiu5f5894tvR5v2Hr5mM5s7dHL7q81c+9n73HhH1WJrOiaGre06+CgTc952ebkevRHwnDG9PzWd7Yb/el2XHuzObEFeRialCUnsTa9yZRy1cjlzDXebuVe5u0Ur9roWqIqJJc5hd/cs7DEx7mPmc+thsjQ3VPMx70LDdfhnv/58ZQojHfPIDI902a3bMfKxl9iXnsH4Lz/yWIjOu57nRl/JOb/84PF8rOvancUHD8ARG8u2dh3dljFU+c3L4z1dPYXNkkkrLaEgJRWLtZKHZj3DcxePZ29GZrUGiD/K4xOwxcXx+UnDADh/wVx2Z7YMmP56U88nLz2T908/18NN+cyYK1lwuP9Z63OHVMX0zx98TFC94iJSCv6A8sH7I8FqpfvOHZz61yK+uvVK3rtvEgPX/MsxptUpAXpkbQegfe5uPrrnxpDK3hjEYu68eyfdsncEPN46P48ZT00NGPnjwtUdPPO3n7nvf06ltrz3wfxy+JHsauk7iOqPZ5513szpRYXEV1byx6FHkFJa7DetjonhixNO51sv19W6zt35/ZDDaxzHvSrEcMDfBgz2sEgP3rSO83/63r09dPmfHLH2X795T1v8i/u3d0SIi3irlb5bNjB0+WL3vmumPEZpUjOu++Rdv3k67Nnts8+sKDd16MymDp05ZONarBYLF097gRvueJjbJ03xeDG0KNjH9P/6DsitNYXWbmvXgf0pqdx3za1c/sBTLD/It8f49pkjeOOcUX5l9UduZgveG/Yf7px4F796xcVP/PBNj+19xgvJW7mbOeXPXwF8okcq4hOYP8T/RCbXHJPPTxrG76be56TbHqAyLo4dbdoz6oc5tN6XT3JZGRs6d/c7r6U6HrxqkofS/vyE0929DX+Ye7vb2nbgk1PPYkm/w9z7fhp0jM8AuYtPTIvpzT79XMDZQ/x+4uV+04PTQIkEB7yCN5NSVkr7vXt4asY0Hp35NN9OGst7903i5cfvIb2kiGkvPsFzzzitvFHzv/HI64rkONywYs/65QeP46mmNepdkRkH7dgCwDF+/JN9tm4ipbyMVx6bwvcTL2f4op+Dyt4lJ5uTl/7B5Hde8ZBpmOEW6rBnFxd//yUvPnEf/1kwl/nXV8UHu9bPzywqYMqbL6IcDpLLynjy+WkB6/vDmKzlYtaIMUy54Q63HzSSPPbCdKa/MJ2bPnqTGU86rcHk8jLa5O31m/5Cr2sFcPPs12i3t0pBJ1WU89IT9zPlDV93yGl//sKRq/722X/Q9s0++8yugQUDj0LHxDDJS1kO+Xe5x3bL/fvombXVp6zfTEr3qnunc/6Ts/htwGB2tO3A7ZM8I0Ou/nw2Vkt8tVa7mVnnj+F/513ss//aT99lxM/f+8nhyVe3eMZxj577FeB8Mbpole8MZvDnwvTm2TFVXtyt7Tsx7L/vYIuLc7dzoHELMyN/+JZpLz4BwOFrV9Jp904AFh96OFkm3/eMi8exuvtB9Nu8nhOX/M7UWc+6n2EXj770JOB/omR13PjRmwBs7tiF0/5YyHPPPuweBPaHeVJkODmgBllrSlJlBUl799B+r9PXevTKqgfz+k/f5bpP38URE4NDKeLsdsoTEkiqqKAsIQHl0DQvKqD3ts203J9Pxz05AHx81/Xugbuzfv2R0sQkLp3zOd8ecxKliYlY7HYOX7eSQzeuA5wTtmJtVm7+4HXSSoo5/+fvKUtI5L5rb6XX9q0kVlbgiImh35YNzjIX/cygNf/yzhnnM/Hjt9jarhN/H9SPi+Z9zTm//ghAvy0bAXho5tMsOGIInXbv5KBtm7n+k3fov3Etd731MoUpqQxa+y9f3nYVK3r2YW3XHhyyaR3TL7vWbc2du2AeK3r1YXvbDqSUlqC0pvvOHe6H+bi//2L03C/dA31pxUXuWa3TXnyCKTfcAUBmwX53mRf8OIcKi4Wvh57qbusRP85hc4fO/N37YOJsNg5fv4oEo2t/6Ob1zHr0bjrm7mJ7m/bMOfYkTvnzV/LTMlje5xDa7t1Dz6xtzL/hEra078S/PQ4iPz2TMxYt4NyF8zn36VdJLiujvaHsE62V3PDx2yzpcyjrO3fj1Wl3k1lUyMMzn+ajU8/mtf9cxNm/zOf0P36heZFzoPnkvxa5B1tdHLnqb7Jat2PIyr/pmbWNL2+7ivsn3IJWigdffZYfBx3DTwOP5q+D+3PCssUklzknySmHg2blZThiYihLTOLFJ+7j7TNGsPjQw+metZ2rvviAvPRM3jx7JENWLWdThy703r6ZkT9+y9dDT2ZXyzZc//Hb7oiZk//6DXtMLPbYWI5esYyKeAvfHX2ix8S7Fvv30Xn3Ts5dOI/u2TvcSlE5HOiYGAav+of04iKUdrCuSw+2t+vAwZvWk1Jexmd3XMPCw49kwPrVdNyTQ/esbWzu2IVzF8xj7pCh3DL7NZ68dIL7+gI89fyjJJeV0mfbZn4+YggPXn2zR9tdNO8rvjn2JPcYQd+tzvvVvAQJQLOyUvpvWOO2/Dvt3sm4rz7GYrNy5RcfcN6CeexPSeOyh5xRVzEOB2f/8gPXf/oOL4y6nL/69efOt1+hs3G+bfP2Mvv0c9ib0Zw9mS0YsnI55/38Pf934jAs1kqOWLuKxYcezk0fvE6c3c4zl1wNwPBFP7vHLNrn7ub0xb9w6p+L+OD0c9mb0ZyL5n/jHst5+OWnSCkr9XDHdt25I2IfblG6EX20d9CgQXrJkiXVJ/TDmj6N79Nw0Yhzko92f0ilJjem+U5Tpm2FM/4ZoG2+fyscYF9qGvFWK8nlZQHT2GNi3A+TQymUDrbIgXOOQrytkqQKX+vQoZRP9IQ3xYlJpJSXkd2qDSmlJdhjY9nepj2HbVxbbd7KOAt7MzLdBsT2Nu1on7uHOIed4qRmFCc1o23+XjTOJaa7Z28Pei62mFjWd+5Kv62bKE1IZFX3Xgxe499ttaN1W7JbteXI1f+gcRoS3pRb4lFo98vURUFyKgmVFSR6WbwuShKTaFZe5pY1N93pN++4ZxdaKZ/yShMSUVpTlpjIlnYdGbhuFZVxFjZ16ExFfDwDNqwBoDipGVvbdaBH1nb2paW72y2neUvy09LptWMrFrvn3BRwhh5bbFZ3+uruWefyFM4xD4B/ux9EgrWSXju28k+vvhy8eT0Wu5296ZnYY2JotT+ftV2602fbZo9rXmGxsLNVG7qZli/3Zm2X7nTbuYMEq5W+a9dUI5l/lFJLtdZ+V1kTBS8IgtAIiISCFx+8IAhClCIKXhAEIUoRBS8IghCliIIXBEGIUkTBC4IgRCmi4AVBEKIUUfCCIAhRiih4QRCEKEUUvCAIQpQiCl4QBCFKEQUvCIIQpYiCFwRBiFJEwQuCIEQpouAFQRCiFFHwgiAIUYooeEEQhChFFLwgCEKUIgpeEAQhShEFLwiCEKWIghcEQYhSRMELgiBEKaLgBUEQohRR8IIgCFGKKHhBEIQoRRS8IAhClBI1Cj7tnHMaWgRBEIRGRdQo+A5PPhFSup4LF0RYEkEQhMZB1Ch4Mz1/+pGeCxfQ6dVZZIy+2L2/x/z5WFq3ptOrs2pddrvHHwuHiPVKbMuWDS2C0MRpc889DS2CUAuiUsFb2rXD0ro1KUOHknnxaPf++I4dAEgZOpRObFfn4AAAD+tJREFUr75K6hnD6f3P3/RevozUM4bTfNw4+qxaSfdvvqb5+PF+y8447zz6/LuCdo8+CkBCnz7ENGtG+sgLaHXLLX7zdPvi/+j5808++9tOneqzL+XUUwBIPOQQDlr8R43O20XXDz+gx7y5HLTkLzq/9RbdPvu0VuW4aHb0UfT6ZSE9vv+Oltdf73Es9bRT3b9bTrzR/TsmPR1iYz3SxrVtS58V/9Dm7rsC1pUx+mLSzq3e3RbftWtIsref/jjdv/02aJqeCxcQk5oaUnneZFx8UY3Sp48YUVXvjz/Uqs7Wd97pV46+a9cEzZc6bBidXn3Vvd1j3tyQ68y89JKAxywdOgSv97TTgh5vc9+9IcsRCm0fuN/9O2nQQABaT77NI02zwYMD5m82eDAdZ75cJd+UuwM+26FS3bWJFHENUms9EteyBQAtrrvWY3/K0ONIGXqce7vjs8+6fyf06EGrmyay74MPaPfgg6QMPY71Rx3tPq4sFjIuGEHSYYdi6dKFmPh4APJee62q3vbtsO3cBUBi794AdJ/zLZXbtpE18Sa6vv8+SYceQtHcuZQsWkTGqFFkXnoJ8R07kv/e+7S4cjzKpCBbXHsNCd27s+u++9EVFajERLq8/RZbL7yIhF69iElNpWzZMgCS+vd350seciTg7L3kzZrF/o8+qrbNml9xORmjRqHtdhylpST06kVsSgoArW6aSKubJuIoKWH/p5+Redml5L/2GsnHHEN89+7o8goyLrqQ2IwMch58iMKvvnKXm3raaaj4eDLHjKFy23YyLrqIraNHE5PcjJRjjqXdIw+jLBYA2t5/P+sH+XkI4+Lou/JfALTNBrGxrO3bD4D4Ll2o3LYNgF6//Urltu00O+Jw4/znsenU01BJSTQbOJCSX391F2lp3Zref/3JlgtGUr5qFW2mTGH3tGlV7TF+PCV//E7F6qqHNP2CEWScdx7x3buz/4MPaXbkkST07k181y6kn302McnJFM2bh6O0lJSTTmL3I4+SceGFNBt4BAWffeast317Or/5JtvHjnWX2+u3X4nNyAC7nbzXXiO+W3eyb76Ztg8/hIqzsO/dd2kxbizNr7gcHA6Kf/mF+C5dSejeDYDMMaOxFxaRdPgAylf8S+s772DDMccC0PH55wDnS2/vq68S36kTzceNw15YgG3XLhJ69SL/rbfdsrSdOpWy5ctJGjQQpZTPpThoyRJypk6lzT1TiMvMpHL7doiJYdOpToXe/sknsbRvR9Khh7L2sP4eebu88zbbLrscgMS+fd37e8z9nn3vvechR1ybNth273Zvt39iOjvv8HzJpZ17DpkXj6Zy+zYyzjsPZbGQdMQRWNq3x15YiKV1a5qPG4eurKRi/XoSevZk3aDBoDV9Vq3Evm8fG44balzvcaSeeCI9f5gPFguW1q3RDgeO4iLyXv2fTzvEJCfjKCkBnN4DS7t2rOlTdU59/l0BQMrJJ1P8448kn3A87R99lB033IB1507suXshJkK2ttY6Yn/AcGAdsBG4q7r0AwcO1HWh8IcfdMH33/vst+bna4fdXqeyt0+4Rq/u3SdoGntZmc6ZNk2X/PWXtubl6dKVK3VlVlbQPLaiIl2ydGnA4+WbNuv9X35ZrXwOu11vufAive/Tz4Kmq8zJ0Xv/95pe3buPXn/8CdpRWVlt2bXFXlGhK7Zv18W//6H3ffa5dlRU1Ch/ZXa2tpeW6qIFC7StqFiv7t1HbzzrLJ90Fdu2aWtentZa6+wpU/T+r772SeOorNSre/fROY89ru3FzrL2zPivtpeUuNNY8/N18eLF2uFw6KzJt+t1xx2nHQ6H1lrrkj//1OtPOknvnDpV733tdY+yrbm52mGzhXxeq3v30euPG1qVf88eba+o0JU5OSGXURMqc3brii1bQk7vsNv9ypL31lt6de8+7r+A9WVn6/zZsz32rT/hRL26dx9dmZOjdz/1lHbY7dpeXq4L583TWmu9++lndPZdd7vTV+zI0raiIo8yzPWWb9igK7Ozq5UlGMWLF+vsO+9yX2OtnW0VCkULFuhNZ5+tV/fuo20FBbrkr7+0w2p1Hy/47vuA96sZh92uV/fuozecelqtzkFrrYElOoBOVc7j4UcpFQusB04DsoC/gNFa69WB8gwaNEgvWbIkIvLUFW2zoa1WYpKSGlqUOqMdDnIefIjMMaPdvYumQPHChST260dcLccUdGUlWCx+rdH6xFFZiQKU0fNrStgLC7FmZaEsFhJ69WpocdyWckO4QLTW6MpKYhIS6lRO4dy5JPXvj6VNm1rlV0ot1VoP8nssggr+aGCq1nqYsX03gNY64ChlY1bwgiA0PooXLiS+Sxfiu3RpaFEajGAKPpI++A7ADtN2FjDEO5FSagIwwdgsVkqtq2V9LYG9tcxbH4h8daexyyjy1Z3GLmNjlC/g263BB1m11rOA2sctGiillgR6izUGRL6609hlFPnqTmOXsbHL500kwySzgU6m7Y7GPkEQBKEeiKSC/wvopZTqppSKBy4GvoxgfYIgCIKJiLlotNY2pdSNwPdALPC61npVpOojDG6eCCPy1Z3GLqPIV3cau4yNXT4PIhZFIwiCIDQsUblUgSAIgiAKXhAEIWpp8gpeKTVcKbVOKbVRKRV4Favw1NVJKfWTUmq1UmqVUmqSsb+5UmqeUmqD8T/T2K+UUjMM2VYopY4wlXWFkX6DUuoK0/6BSql/jTwzVC2mXSqlYpVSy5VSXxvb3ZRSi40yPzQGvVFKJRjbG43jXU1l3G3sX6eUGmbaX+f2VkplKKU+UUqtVUqtUUod3ZjaUCl1i3F9VyqlZiulEhu6DZVSryul9iilVpr2RbzNAtURonxPGtd4hVLqc6VURm3bpjbtX518pmO3KaW0UqplQ7VfxAi0hkFT+MM5eLsJ6A7EA/8A/SJYXzvgCON3Ks6lGPoBT2CstQPcBUw3fp8JzAEUcBSw2NjfHNhs/M80fmcax/400ioj7xm1kPNW4H3ga2P7I+Bi4/dM4Drj9/XATOP3xcCHxu9+RlsmAN2MNo4NV3sDbwFXGb/jgYzG0oY4J+htAZJMbTe2odsQOB44Alhp2hfxNgtUR4jynQ7EGb+nm+SrcdvUtP1Dkc/Y3wlnIMg2oGVDtV/EdFZ9VhZ24eFo4HvT9t3A3fVY/xc419pZB7Qz9rUD1hm/X8G5/o4r/Trj+GjgFdP+V4x97YC1pv0e6UKUqSPwA3Ay8LVxw+01PWjuNjNu7KON33FGOuXdjq504WhvIB2nAlVe+xtFG1I1A7u50SZfA8MaQxsCXfFUoBFvs0B1hCKf17Hzgff8nXN1bVObezhU+YBPgP7AVqoUfIO0XyT+mrqLxt9yCMEXpw4TRlfwcGAx0EZrvcs4lAO4Vg0KJF+w/Vl+9teE54A7AIex3QLYr7W2+SnTLYdxvMBIX1O5a0I3IBd4QzndSP9TSiXTSNpQa50NPAVsB3bhbJOlNK42dFEfbRaojpoyHqdlWxv5anMPV4tS6j9Attb6H69DjbH9akVTV/ANglIqBfgUuFlrXWg+pp2v6gaJPVVKnQ3s0VovbYj6QyQOZ1f5Za314UAJzq6rmwZuw0zgPzhfRO2BZJzLXjdq6qPNaluHUuoewAa8F3ahaolS6v/bO7sQq6oojv/+9IlEY0aRJCVjoqCEgQhliYVIWPlQUFAvZgQxUtBDBAqhBCkqmJJoD/ZhmZEiESYWRUKOg982ajY5zAhZ9OWDZJmYrR72ut0z47neO9PcmXtv6wcb9t17n73XXfeedfbZ65y1hwHzgZfKtR0ohuJ/Xe8GftDDIUi6gmTcN5jZFi/+SdJIrx8J/FxGvkuVj8opr5SpwGxJJ4D3Scs0K4HhkgovtWX7/FcOr28CTvVD7r5wEjhpZrv982aSwa8VHc4Aus3sFzM7D2wh6bWWdFhgMHRWaoyKkDQHeBB4wg1cf+Q7Rd/1X44xpIv4V36+jAIOSLqpH/JVTX//mcFcDxroRJoNdpF+qIJTZkIVxxOwHni1V/kyejpSlnr+AXo6a/Z4+QjSOvR1nrqBEV7X21kzq5+yTqfoZN1ETwdVi+fn0dNB9YHnJ9DTCdZFcoANiL6BL4Fxnl/o+qsJHZIinh4FhvnxbwPP1oIOuXgNvuo6KzVGhfLdD3wN3NCrXZ9101f9VyJfr7oTFNfgh0R/1UiDNlDVvkDyeH9L8r4vqPJYd5NusdqBQ55mkdb8PgeOA59lfnQBq122w8DkTF9zSTtddQJPZsonA0f8mNco4TCqQNbpFA18s/8BO/1EucrLr/bPnV7fnDl+gcvQQeYplIHQNzAJ2Od6/NBPlprRIbAI+Mb7eIdkiIZUh8BGkk/gPOku6KnB0FmpMSqUr5O0Zl04V9b2Vzf90X85+XrVn6Bo4Addf9VKEaogCIKgQan3NfggCIKgBGHggyAIGpQw8EEQBA1KGPggCIIGJQx8EARBgxIGPqhZJF0v6ZCnHyV9n/l8ZZljJ0taVcEYuwZO4ov6Hi6ppVr9B0E54jHJoC6QtBA4Y2bLM2WXWzE+Sc3h8Yq2mtnEIRYl+J8SM/igrpD0lqS1knYDSyVNkdTmgct2SRrn7aarGA9/occD3yGpS9Jzmf7OZNrvUDFO/YZMTO9ZXrbfY31vzZFrgqQ9fnfRLmkssAQY42XLvN0LkvZ6m0VeNjoz5jGXYZjXLVHaf6Bd0vLe4wbBpajapttBUEVGAXeZ2QVJ1wL3WNrkfQbwCvBIzjHjgXtJcfw7JK2xFGsmyx2k1+h/AFqBqZL2kcLCTjOzbkkbS8j0DLDSzDb48tFlpFfTJ5rZJABJM4GxwBTS25IfSZpGilw5jvR2ZaukN4AWSW+SwuyONzNTZsOMIKiEmMEH9cgmM7vg+SZgk9JOPStIBjqPj83snJn9Sgr4lBe2dY+ZnTSzv0mv1o8mXRi6zKzb25Qy8G3AfEkvArea2dmcNjM9HQQOeN9jve47M2v1/LuksBingT+BdZIeBv4oMXYQ5BIGPqhHfs/kXwa+8HXuh0ixSfI4l8lfIP/utZI2uZjZe8Bs4CywTdJ9Oc0ELDazSZ5uM7N1hS4u7tL+Is32N5MiMm6vVJ4ggDDwQf3TRDE065wq9N8BNKu41+djeY0kNZNm+qtIO33dDvxGWhIq8Akw1/cTQNLNkm70ulsk3en5x4Gd3q7JzLYBz5N2HgqCigkDH9Q7S4HFkg5SBZ+SL7W0ANsl7ScZ7dM5TR8Fjkg6BEwE1pvZKaBVafPuZWb2KWmv3DZJh0kz88IFoAOYJ+kYKbrmGq/bKqkd2EnaazcIKiYekwyCMki6xszO+FM1q4HjZrZiAPsfTTxOGVSBmMEHQXme9pn5UdKS0OtDLE8QVETM4IMgCBqUmMEHQRA0KGHggyAIGpQw8EEQBA1KGPggCIIGJQx8EARBg/IP58NDbwC2TRAAAAAASUVORK5CYII=\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"3iZTVn5WQFpX","colab":{"base_uri":"https://localhost:8080/","height":350},"executionInfo":{"status":"ok","timestamp":1616295228344,"user_tz":-480,"elapsed":351885,"user":{"displayName":"YDBX","photoUrl":"https://lh5.googleusercontent.com/-UMSb4ZzIN6M/AAAAAAAAAAI/AAAAAAAAHkc/DgzvjcH-KTA/s64/photo.jpg","userId":"15751498837825255117"}},"outputId":"d76e66f4-665f-4a33-bbaf-2f3ba91410ef"},"source":["del model\n","model = NeuralNet(tr_set.dataset.dim).to(device)\n","ckpt = torch.load(config['save_path'], map_location='cpu')  # Load your best model\n","model.load_state_dict(ckpt)\n","plot_pred(dv_set, model, device)  # Show prediction on the validation set"],"execution_count":108,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 360x360 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"aQikz3IPiyPf"},"source":["# **Testing**\n","The predictions of your model on testing set will be stored at `pred.csv`."]},{"cell_type":"code","metadata":{"id":"O8cTuQjQQOon","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616295228347,"user_tz":-480,"elapsed":351879,"user":{"displayName":"YDBX","photoUrl":"https://lh5.googleusercontent.com/-UMSb4ZzIN6M/AAAAAAAAAAI/AAAAAAAAHkc/DgzvjcH-KTA/s64/photo.jpg","userId":"15751498837825255117"}},"outputId":"7be4780e-8476-4cce-f177-5beb105266f0"},"source":["def save_pred(preds, file):\n","    ''' Save predictions to specified file '''\n","    print('Saving results to {}'.format(file))\n","    with open(file, 'w') as fp:\n","        writer = csv.writer(fp)\n","        writer.writerow(['id', 'tested_positive'])\n","        for i, p in enumerate(preds):\n","            writer.writerow([i, p])\n","\n","preds = test(tt_set, model, device)  # predict COVID-19 cases with your model\n","save_pred(preds, 'pred.csv')         # save prediction file to pred.csv"],"execution_count":109,"outputs":[{"output_type":"stream","text":["Saving results to pred.csv\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"nfrVxqJanGpE"},"source":["# **Hints**\n","\n","## **Simple Baseline**\n","* Run sample code\n","\n","## **Medium Baseline**\n","* Feature selection: 40 states + 2 `tested_positive` (`TODO` in dataset)\n","\n","## **Strong Baseline**\n","* Feature selection (what other features are useful?)\n","* DNN architecture (layers? dimension? activation function?)\n","* Training (mini-batch? optimizer? learning rate?)\n","* L2 regularization\n","* There are some mistakes in the sample code, can you find them?"]},{"cell_type":"markdown","metadata":{"id":"9tmCwXgpot3t"},"source":["# **Reference**\n","This code is completely written by Heng-Jui Chang @ NTUEE.  \n","Copying or reusing this code is required to specify the original author. \n","\n","E.g.  \n","Source: Heng-Jui Chang @ NTUEE (https://github.com/ga642381/ML2021-Spring/blob/main/HW01/HW01.ipynb)\n"]}]}